generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  name             String
  username         String?   @unique
  email            String    @unique
  password         String
  bio              String?
  image            String?
  location         String?
  portfolioWebsite String?
  reputation       Int?      @default(0)
  joinedAt         DateTime? @default(now())
  emailVerified    DateTime?

  account                 Account[]                     @relation("account")
  session                 Session[]
  userInteraction         Interaction[]                 @relation("userInteraction")
  questions               Question[]                    @relation("questionsAsk")
  tagsFollow              TagFollower[]                 @relation("tagFollow")
  answerQuestions         UserAnswerQuestion[]          @relation("answerQuestions")
  answerQuestionDownvotes UserAnswerQuestionDownvotes[] @relation("answerQuestionsDownvotes")
  answerQuestionUpvotes   UserAnswerQuestionUpvotes[]   @relation("answerQuestionsUpvotes")
  downvotes               UserDownVoteQuestion[]        @relation("downvotes")
  savedQuestions          UserSavedQuestion[]           @relation("savedQuestions")
  userUpvotes             UserUpvotesQuestion[]         @relation("upvotes")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation("account", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Question {
  id                String                 @id @default(uuid())
  title             String
  content           String
  views             Int                    @default(0)
  createdAt         DateTime               @default(now())
  authorId          String?
  interaction       Interaction[]          @relation("userInteraction")
  author            User?                  @relation("questionsAsk", fields: [authorId], references: [id])
  tagOnQuestion     TagOnQuestion[]        @relation("tagOnQuestion")
  userAnswers       UserAnswerQuestion[]   @relation("answerQuestions")
  userDownvotes     UserDownVoteQuestion[] @relation("downvotes")
  userSavedQuestion UserSavedQuestion[]    @relation("savedQuestions")
  userUpvotes       UserUpvotesQuestion[]  @relation("upvotes")
}

model Tag {
  id            String          @id @default(uuid())
  desctiption   String
  createdAt     DateTime        @default(now())
  tagFollower   TagFollower[]   @relation("tagFollow")
  tagOnQuestion TagOnQuestion[] @relation("tagOnQuestion")
}

model Interaction {
  id                   String              @id @default(uuid())
  action               String
  userId               String?
  userAnswerQuestionId String?
  questionId           String?
  question             Question?           @relation("userInteraction", fields: [questionId], references: [id])
  userAnswerQuestion   UserAnswerQuestion? @relation("userInteraction", fields: [userAnswerQuestionId], references: [id])
  user                 User?               @relation("userInteraction", fields: [userId], references: [id])
}

model UserAnswerQuestion {
  id                 String                        @id @default(uuid())
  content            String
  createdAt          DateTime                      @default(now())
  userId             String?
  questionId         String?
  userAnswerQuestion Interaction[]                 @relation("userInteraction")
  question           Question?                     @relation("answerQuestions", fields: [questionId], references: [id], onDelete: Cascade)
  user               User?                         @relation("answerQuestions", fields: [userId], references: [id])
  questionDownvotes  UserAnswerQuestionDownvotes[] @relation("answerQuestionsDownvotes")
  questionUpvotes    UserAnswerQuestionUpvotes[]   @relation("answerQuestionsUpvotes")
}

model TagFollower {
  id        String   @id @default(uuid())
  dateAdded DateTime @default(now())
  tagId     String?
  userId    String?
  tag       Tag?     @relation("tagFollow", fields: [tagId], references: [id])
  user      User?    @relation("tagFollow", fields: [userId], references: [id])
}

model TagOnQuestion {
  id         String    @id @default(cuid())
  tagId      String?
  questionId String?
  question   Question? @relation("tagOnQuestion", fields: [questionId], references: [id])
  tag        Tag?      @relation("tagOnQuestion", fields: [tagId], references: [id])
}

model UserUpvotesQuestion {
  id         String    @id @default(uuid())
  dateAdded  DateTime  @default(now())
  userId     String?
  questionId String?
  question   Question? @relation("upvotes", fields: [questionId], references: [id], onDelete: Cascade)
  user       User?     @relation("upvotes", fields: [userId], references: [id])
}

model UserDownVoteQuestion {
  id         String    @id @default(uuid())
  dateAdded  DateTime  @default(now())
  userId     String?
  questionId String?
  question   Question? @relation("downvotes", fields: [questionId], references: [id], onDelete: Cascade)
  user       User?     @relation("downvotes", fields: [userId], references: [id])
}

model UserSavedQuestion {
  id         String    @id @default(uuid())
  dateAdded  DateTime  @default(now())
  questionId String?
  userId     String
  question   Question? @relation("savedQuestions", fields: [questionId], references: [id], onDelete: Cascade)
  user       User      @relation("savedQuestions", fields: [userId], references: [id])
}

model UserAnswerQuestionUpvotes {
  id                 String              @id @default(uuid())
  userId             String?
  questionAnsweredId String?
  questionAnswered   UserAnswerQuestion? @relation("answerQuestionsUpvotes", fields: [questionAnsweredId], references: [id])
  user               User?               @relation("answerQuestionsUpvotes", fields: [userId], references: [id])
}

model UserAnswerQuestionDownvotes {
  id                 String              @id @default(uuid())
  userId             String?
  questionAnsweredId String?
  questionAnswered   UserAnswerQuestion? @relation("answerQuestionsDownvotes", fields: [questionAnsweredId], references: [id])
  user               User?               @relation("answerQuestionsDownvotes", fields: [userId], references: [id])
}
